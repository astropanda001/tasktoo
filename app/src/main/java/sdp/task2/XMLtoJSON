import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.*;
import org.json.JSONObject;
import org.json.JSONArray;

import java.io.InputStream;
import java.util.*;

public class XMLtoJSON {

    // Define valid fields
    private static final Set<String> VALID_FIELDS = Set.of(
        "name", "postalZip", "region", "country", "address", "list"
    );

    public static void main(String[] args) {
        try {
            Scanner scanner = new Scanner(System.in);
            System.out.println("Available fields: " + String.join(", ", VALID_FIELDS));
            System.out.print("Enter fields to include in JSON (comma-separated): ");
            String input = scanner.nextLine();

            // Sanitize input
            Set<String> selectedFields = new HashSet<>();
            for (String field : input.trim().split("\\s*,\\s*")) {
                if (VALID_FIELDS.contains(field)) {
                    selectedFields.add(field);
                } else if (!field.isBlank()) {
                    System.out.println("⚠️ Ignored invalid field: " + field);
                }
            }

            if (selectedFields.isEmpty()) {
                System.out.println("❌ No valid fields selected. Exiting...");
                return;
            }

            // Load XML from resources
            InputStream inputStream = XMLtoJSON.class.getClassLoader().getResourceAsStream("data.xml");
            if (inputStream == null) {
                System.out.println("❌ Could not find data.xml in resources folder.");
                return;
            }

            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document doc = builder.parse(inputStream);
            doc.getDocumentElement().normalize();

            NodeList nodeList = doc.getElementsByTagName("record");
            JSONArray jsonArray = new JSONArray();

            for (int i = 0; i < nodeList.getLength(); i++) {
                Node node = nodeList.item(i);
                if (node.getNodeType() != Node.ELEMENT_NODE) continue;

                Element element = (Element) node;
                JSONObject jsonObj = new JSONObject();

                for (String field : selectedFields) {
                    String value = getTagValue(field, element);
                    jsonObj.put(field, value);
                }

                jsonArray.put(jsonObj);
            }

            System.out.println("\n✅ JSON Output:");
            System.out.println(jsonArray.toString(2));

            scanner.close();

        } catch (Exception e) {
            System.out.println("❌ Error: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private static String getTagValue(String tag, Element element) {
        NodeList nodeList = element.getElementsByTagName(tag);
        if (nodeList.getLength() == 0) return "";
        Node node = nodeList.item(0).getFirstChild();
        return (node != null) ? node.getNodeValue() : "";
    }
}
